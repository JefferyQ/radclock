---
 conf/files          |    1 
 kern/kern_ffclock.c |  317 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 sys/time.h          |    1 
 sys/timeffc.h       |   50 ++++++++
 4 files changed, 369 insertions(+)

Index: sys/conf/files
===================================================================
--- sys.orig/conf/files	2011-07-05 16:41:56.000000000 +1000
+++ sys/conf/files	2011-07-05 16:43:17.000000000 +1000
@@ -2298,20 +2298,21 @@ kern/kern_cpu.c			standard
 kern/kern_cpuset.c		standard
 kern/kern_context.c		standard
 kern/kern_descrip.c		standard
 kern/kern_dtrace.c		optional kdtrace_hooks
 kern/kern_environment.c		standard
 kern/kern_et.c			standard
 kern/kern_event.c		standard
 kern/kern_exec.c		standard
 kern/kern_exit.c		standard
 kern/kern_fail.c		standard
+kern/kern_ffclock.c		optional ffclock
 kern/kern_fork.c		standard
 kern/kern_gzio.c		optional gzio
 kern/kern_hhook.c		standard
 kern/kern_idle.c		standard
 kern/kern_intr.c		standard
 kern/kern_jail.c		standard
 kern/kern_khelp.c		standard
 kern/kern_kthread.c		standard
 kern/kern_ktr.c			optional ktr
 kern/kern_ktrace.c		standard
Index: sys/kern/kern_ffclock.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ sys/kern/kern_ffclock.c	2011-07-05 16:43:17.000000000 +1000
@@ -0,0 +1,317 @@
+/*-
+ * Copyright (C) 2010 University of Melbourne
+ * All rights reserved.
+ *
+ * This software was developed by the University of Melbourne under sponsorship
+ * from the FreeBSD Foundation.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <sys/cdefs.h>
+#include <sys/param.h>
+#include <sys/systm.h>
+#include <sys/timeffc.h>
+
+extern struct ffclock_estimate ffclock_estimate;
+extern struct bintime ffclock_monotonic_boot;
+
+/*
+ * Feed-Forward Clock time functions
+ */
+void
+ffclock_abstime(clockid_t clock_id, ffcounter *ffcount, struct bintime *bt,
+				struct bintime *error_bound)
+{
+	struct ffclock_estimate cest;
+	struct bintime bt2;
+	ffcounter ffc;
+	ffcounter update_ffcount;
+	ffcounter ffdelta_error;
+	uint32_t flags;
+
+	flags = 0;
+	switch (clock_id) {
+	case CLOCK_MONOTONIC_FAST:
+	case CLOCK_REALTIME_FAST:
+	case CLOCK_UPTIME_FAST:
+		flags |= FFCLOCK_FAST;
+		break;
+	default:
+		break;
+	}
+
+	switch (clock_id) {
+	case CLOCK_REALTIME:
+	case CLOCK_REALTIME_FAST:
+	case CLOCK_REALTIME_PRECISE:
+	case CLOCK_MONOTONIC:
+	case CLOCK_MONOTONIC_FAST:
+	case CLOCK_MONOTONIC_PRECISE:
+	case CLOCK_UPTIME:
+	case CLOCK_UPTIME_FAST:
+	case CLOCK_UPTIME_PRECISE:
+		flags |= FFCLOCK_SMOOTH;
+		break;
+	default:
+		break;
+	}
+
+	switch (clock_id) {
+	case CLOCK_REALTIME:
+	case CLOCK_REALTIME_FAST:
+	case CLOCK_REALTIME_PRECISE:
+		flags |= FFCLOCK_LEAPSEC;
+		break;
+	default:
+		break;
+	}
+
+	switch (clock_id) {
+	case CLOCK_MONOTONIC:
+	case CLOCK_MONOTONIC_FAST:
+	case CLOCK_MONOTONIC_PRECISE:
+	case CLOCK_UPTIME:
+	case CLOCK_UPTIME_FAST:
+	case CLOCK_UPTIME_PRECISE:
+		flags |= FFCLOCK_BOOTTIME;
+		break;
+	default:
+		break;
+	}
+
+	switch (clock_id) {
+	case CLOCK_VIRTUAL:				/* TODO Not Implemented yet */
+	case CLOCK_PROF:				/* TODO Not Implemented yet */
+	case CLOCK_SECOND:				/* TODO Not Implemented yet */
+	case CLOCK_THREAD_CPUTIME_ID:	/* TODO Not Implemented yet */
+	case CLOCK_BARE:
+	default:
+		break;
+	}
+
+	/* Get counter and corresponding time */
+	if ((flags & FFCLOCK_FAST) == FFCLOCK_FAST)
+		ffclock_last_tick(&ffc, bt, flags);
+	else {
+		ffclock_read_counter(&ffc);
+		ffclock_convert_abs(ffc, bt, flags);
+	}
+
+	/* Current ffclock estimate, use update_ffcount as generation number */
+	do {
+		update_ffcount = ffclock_estimate.update_ffcount;
+		bcopy(&ffclock_estimate, &cest, sizeof(struct ffclock_estimate));
+	} while (update_ffcount != ffclock_estimate.update_ffcount);
+
+	/*
+	 * Leap second adjustement. Total as seen by synchronisation algorithm since
+	 * it started. cest.leapsec_next is the ffcounter prediction of when the next
+	 * leapsecond occurs.
+	 */
+	if ((flags & FFCLOCK_LEAPSEC) == FFCLOCK_LEAPSEC) {
+		bt->sec -= cest.leapsec_total;
+		if (ffc > cest.leapsec_next)
+			bt->sec -= cest.leapsec;
+	}
+
+	/*
+	 * Boot time adjustement, for uptime/monotonic clocks.
+	 */
+	if ((flags & FFCLOCK_BOOTTIME) == FFCLOCK_BOOTTIME) {
+		if (bintime_cmp(&(cest.boot_time), &ffclock_monotonic_boot, >)) {
+			bt2 = cest.boot_time;
+			bintime_sub(&bt2, &ffclock_monotonic_boot);
+			bintime_sub(bt, &bt2);
+		} else {
+			bt2 = ffclock_monotonic_boot;
+			bintime_sub(&bt2, &(cest.boot_time));
+			bintime_add(bt, &bt2);
+		}
+	}
+
+	/*
+	 * Compute error bound if passed a valid pointer.
+	 */
+	if (error_bound) {
+		ffdelta_error = ffc - cest.update_ffcount;
+		ffclock_convert_diff(ffdelta_error, error_bound);
+		/* 18446744073709 = int(2^64 / 1e12), err_bound_rate in [ps/s] */
+		bintime_mul(error_bound, cest.error_bound_rate * (uint64_t)18446744073709LL);
+		/* 18446744073 = int(2^64 / 1e9), since err_abs in [ns] */
+		bintime_addx(error_bound, cest.error_bound_abs * (uint64_t)18446744073LL);
+	}
+
+	if (ffcount)
+		*ffcount = ffc;
+}
+
+void
+ffclock_difftime(ffcounter ffdelta, struct bintime *bt,
+				struct bintime *error_bound)
+{
+	ffcounter update_ffcount;
+	uint32_t err_rate;
+
+// TODO: Check options, bit mask
+	ffclock_convert_diff(ffdelta, bt);
+
+	if (error_bound) {
+		do {
+			update_ffcount = ffclock_estimate.update_ffcount;
+			err_rate = ffclock_estimate.error_bound_rate;
+		} while (update_ffcount != ffclock_estimate.update_ffcount);
+
+		ffclock_convert_diff(ffdelta, error_bound);
+		/* 18446744073709 = int(2^64 / 1e12), err_bound_rate in [ps/s] */
+		bintime_mul(error_bound, err_rate * (uint64_t)18446744073709LL);
+	}
+}
+
+
+/*
+ * High level functions to access the Feed-Forward Clock.
+ */
+void
+ffclock_bintime(struct bintime *bt)
+{
+
+	ffclock_abstime(CLOCK_REALTIME, NULL, bt, NULL);
+}
+
+void
+ffclock_nanotime(struct timespec *tsp)
+{
+	struct bintime bt;
+
+	ffclock_abstime(CLOCK_REALTIME, NULL, &bt, NULL);
+	bintime2timespec(&bt, tsp);
+}
+
+void
+ffclock_microtime(struct timeval *tvp)
+{
+	struct bintime bt;
+
+	ffclock_abstime(CLOCK_REALTIME, NULL, &bt, NULL);
+	bintime2timeval(&bt, tvp);
+}
+
+void
+ffclock_getbintime(struct bintime *bt)
+{
+
+	ffclock_abstime(CLOCK_REALTIME_FAST, NULL, bt, NULL);
+}
+
+void
+ffclock_getnanotime(struct timespec *tsp)
+{
+	struct bintime bt;
+
+	ffclock_abstime(CLOCK_REALTIME_FAST, NULL, &bt, NULL);
+	bintime2timespec(&bt, tsp);
+}
+
+void
+ffclock_getmicrotime(struct timeval *tvp)
+{
+	struct bintime bt;
+
+	ffclock_abstime(CLOCK_REALTIME_FAST, NULL, &bt, NULL);
+	bintime2timeval(&bt, tvp);
+}
+
+void
+ffclock_binuptime(struct bintime *bt)
+{
+
+	ffclock_abstime(CLOCK_UPTIME, NULL, bt, NULL);
+}
+
+void
+ffclock_nanouptime(struct timespec *tsp)
+{
+	struct bintime bt;
+
+	ffclock_abstime(CLOCK_UPTIME, NULL, &bt, NULL);
+	bintime2timespec(&bt, tsp);
+}
+
+void
+ffclock_microuptime(struct timeval *tvp)
+{
+	struct bintime bt;
+
+	ffclock_abstime(CLOCK_UPTIME, NULL, &bt, NULL);
+	bintime2timeval(&bt, tvp);
+}
+
+void
+ffclock_getbinuptime(struct bintime *bt)
+{
+
+	ffclock_abstime(CLOCK_UPTIME_FAST, NULL, bt, NULL);
+}
+
+void
+ffclock_getnanouptime(struct timespec *tsp)
+{
+	struct bintime bt;
+
+	ffclock_abstime(CLOCK_UPTIME_FAST, NULL, &bt, NULL);
+	bintime2timespec(&bt, tsp);
+}
+
+void
+ffclock_getmicrouptime(struct timeval *tvp)
+{
+	struct bintime bt;
+
+	ffclock_abstime(CLOCK_UPTIME_FAST, NULL, &bt, NULL);
+	bintime2timeval(&bt, tvp);
+}
+
+void
+ffclock_bindifftime(ffcounter ffdelta, struct bintime *bt)
+{
+
+	ffclock_difftime(ffdelta, bt, NULL);
+}
+
+void
+ffclock_nanodifftime(ffcounter ffdelta, struct timespec *tsp)
+{
+	struct bintime bt;
+
+	ffclock_difftime(ffdelta, &bt, NULL);
+	bintime2timespec(&bt, tsp);
+}
+
+void
+ffclock_microdifftime(ffcounter ffdelta, struct timeval *tvp)
+{
+	struct bintime bt;
+
+	ffclock_difftime(ffdelta, &bt, NULL);
+	bintime2timeval(&bt, tvp);
+}
Index: sys/sys/time.h
===================================================================
--- sys.orig/sys/time.h	2011-07-05 16:41:56.000000000 +1000
+++ sys/sys/time.h	2011-07-05 16:43:17.000000000 +1000
@@ -270,20 +270,21 @@ struct clockinfo {
 #define CLOCK_MONOTONIC	4
 #define CLOCK_UPTIME	5		/* FreeBSD-specific. */
 #define CLOCK_UPTIME_PRECISE	7	/* FreeBSD-specific. */
 #define CLOCK_UPTIME_FAST	8	/* FreeBSD-specific. */
 #define CLOCK_REALTIME_PRECISE	9	/* FreeBSD-specific. */
 #define CLOCK_REALTIME_FAST	10	/* FreeBSD-specific. */
 #define CLOCK_MONOTONIC_PRECISE	11	/* FreeBSD-specific. */
 #define CLOCK_MONOTONIC_FAST	12	/* FreeBSD-specific. */
 #define CLOCK_SECOND	13		/* FreeBSD-specific. */
 #define CLOCK_THREAD_CPUTIME_ID	14
+#define CLOCK_BARE	15	// TODO that is a pretty bad name
 #endif
 
 #ifndef TIMER_ABSTIME
 #define TIMER_RELTIME	0x0	/* relative timer */
 #define TIMER_ABSTIME	0x1	/* absolute timer */
 #endif
 
 #ifdef _KERNEL
 
 /*
Index: sys/sys/timeffc.h
===================================================================
--- sys.orig/sys/timeffc.h	2011-07-05 16:43:09.000000000 +1000
+++ sys/sys/timeffc.h	2011-07-05 16:43:39.000000000 +1000
@@ -93,13 +93,63 @@ void ffclock_read_counter(ffcounter *ffc
 void ffclock_last_tick(ffcounter *ffcount, struct bintime *bt, uint32_t flags);
 
 /*
  * Low level routines to convert a counter timestamp into absolute time and a
  * counter timestamp interval into interval in seconds. The absolute time
  * conversion accepts the FFCLOCK_SMOOTH flag.
  */
 void ffclock_convert_abs(ffcounter ffcount, struct bintime *bt, uint32_t flags);
 void ffclock_convert_diff(ffcounter ffdelta, struct bintime *bt);
 
+/*
+ * Feed-Forward clock routines.
+ *
+ * These functions rely on the timecounters and ffclock_estimates stored in
+ * fftimehands. Note that the error_bound parameter is not the error of the
+ * clock but an upper bound on the error of the absolute time or time interval
+ * returned.
+ *
+ * ffclock_abstime(): retrieves current time as counter value and corresponding
+ * 		conversion in seconds. The value of the time in seconds depends on the
+ *		flags passed: for a unique counter value, different conversions in
+ * 		second are possible.
+ * ffclock_difftime(): computes a time interval in seconds based on an interval
+ * 		measured in counter value. This should be the preferred way to measure
+ * 		 very accurately small time intervals.
+ */
+void ffclock_abstime(clockid_t clock_id, ffcounter *ffcount, struct bintime *bt, struct bintime *error_bound);
+void ffclock_difftime(ffcounter ffdelta, struct bintime *bt, struct bintime *error_bound);
+
+/*
+ * Wrapper routines to return current absolute time using the Feed-Forward
+ * Clock. These functions are named after those defined in <sys/time.h>, which
+ * contains a description of the original ones.
+ *
+TODO: Fix the following comment
+This set of functions is different from the ones defined in <sys/time.h>
+since not all them make sense in a Feed-Forward paradigm.
+These do not retur error bounds associated with absolute time or time
+intervals.
+ */
+void ffclock_bintime(struct bintime *bt);
+void ffclock_nanotime(struct timespec *tsp);
+void ffclock_microtime(struct timeval *tvp);
+
+void ffclock_getbintime(struct bintime *bt);
+void ffclock_getnanotime(struct timespec *tsp);
+void ffclock_getmicrotime(struct timeval *tvp);
+
+void ffclock_binuptime(struct bintime *bt);
+void ffclock_nanouptime(struct timespec *tsp);
+void ffclock_microuptime(struct timeval *tvp);
+
+void ffclock_getbinuptime(struct bintime *bt);
+void ffclock_getnanouptime(struct timespec *tsp);
+void ffclock_getmicrouptime(struct timeval *tvp);
+
+void ffclock_bindifftime(ffcounter ffdelta, struct bintime *bt);
+void ffclock_nanodifftime(ffcounter ffdelta, struct timespec *tsp);
+void ffclock_microdifftime(ffcounter ffdelta, struct timeval *tvp);
+
 #endif /* _KERNEL */
 #endif /* __BSD_VISIBLE */
 #endif /* _SYS_TIMEFF_H */
