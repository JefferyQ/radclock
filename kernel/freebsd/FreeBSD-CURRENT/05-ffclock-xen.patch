Feed-forward clock support for Xen.

Allow clock dependent mode of operation and a universal ffcounter to ensure all
guests see the same time and allow live migration.

---
 i386/xen/clock.c |   35 +++++++++++++++++++++++++++++++++++
 kern/kern_tc.c   |   42 +++++++++++++++++++++++++++++++++++-------
 sys/timetc.h     |   14 ++++++++++++++
 x86/x86/tsc.c    |   27 +++++++++++++++++++++++++++
 4 files changed, 111 insertions(+), 7 deletions(-)

Index: sys/i386/xen/clock.c
===================================================================
--- sys.orig/i386/xen/clock.c	2011-06-16 09:50:40.000000000 +1000
+++ sys/i386/xen/clock.c	2011-06-16 10:07:43.000000000 +1000
@@ -1,17 +1,23 @@
 /*-
  * Copyright (C) 1990 The Regents of the University of California.
  * All rights reserved.
  *
  * This code is derived from software contributed to Berkeley by
  * William Jolitz and Don Ahn.
  *
+ * Copyright (C) 2010 The University of Melbourne
+ * All rights reserved.
+ *
+ * Portions of this software were developed by the University of Melbourne
+ * under sponsorship from the FreeBSD Foundation.
+ *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in the
  *    documentation and/or other materials provided with the distribution.
  * 3. All advertising materials mentioning features or use of this software
  *    must display the following acknowledgement:
@@ -285,28 +291,42 @@ static inline int time_values_up_to_date
 
 	src = &HYPERVISOR_shared_info->vcpu_info[cpu].time; 
 	dst = &per_cpu(shadow_time, cpu); 
 
 	rmb();
 	return (dst->version == src->version);
 }
 
 static	unsigned xen_get_timecount(struct timecounter *tc);
 
+#ifdef FFCLOCK
+static uint64_t xen_get_timecount_64(struct timecounter *tc);
+
+static struct timecounter xen_timecounter = {
+	.tc_get_timecount = xen_get_timecount,
+	.tc_poll_pps = 0,
+	.tc_counter_mask = ~0u,
+	.tc_frequency = 0,
+	.tc_name = "ixen",
+	.tc_quality = 0,
+	.tc_get_timecount_64 = &xen_get_timecount_64
+};
+#else
 static struct timecounter xen_timecounter = {
 	xen_get_timecount,	/* get_timecount */
 	0,			/* no poll_pps */
 	~0u,			/* counter_mask */
 	0,			/* frequency */
 	"ixen",			/* name */
 	0			/* quality */
 };
+#endif
 
 static int
 clkintr(void *arg)
 {
 	int64_t delta_cpu, delta;
 	struct trapframe *frame = (struct trapframe *)arg;
 	int cpu = smp_processor_id();
 	struct shadow_time_info *shadow = &per_cpu(shadow_time, cpu);
 
 	do {
@@ -828,20 +848,35 @@ xen_get_timecount(struct timecounter *tc
 	shadow = &per_cpu(shadow_time, smp_processor_id());
 
 	__get_time_values_from_xen();
 	
         clk = shadow->system_timestamp + get_nsec_offset(shadow);
 
 	return (uint32_t)(clk >> 9);
 
 }
 
+#ifdef FFCLOCK
+static uint64_t
+xen_get_timecount_64(struct timecounter *tc)
+{
+	uint64_t clk;
+	struct shadow_time_info *shadow;
+	shadow = &per_cpu(shadow_time, smp_processor_id());
+
+	__get_time_values_from_xen();
+	clk = shadow->system_timestamp + get_nsec_offset(shadow);
+
+	return clk;
+}
+#endif
+
 /* Return system time offset by ticks */
 uint64_t
 get_system_time(int ticks)
 {
     return processed_system_time + (ticks * NS_PER_TICK);
 }
 
 /*
  * Track behavior of cur_timer->get_offset() functionality in timer_tsc.c
  */
Index: sys/kern/kern_tc.c
===================================================================
--- sys.orig/kern/kern_tc.c	2011-06-16 10:05:38.000000000 +1000
+++ sys/kern/kern_tc.c	2011-06-16 10:07:43.000000000 +1000
@@ -572,43 +572,64 @@ ffdelta2bintime(ffcounter *ffdelta, stru
 			ffdelta2 -= delta_max;
 		}
 		delta.sec = 0;
 		delta.frac = ffth->cest.period;
 		bintime_mul(&delta, ffdelta2);
 		bintime_add(bt, &delta);
 	} while (gen == 0 || gen != ffth->gen);
 }
 
 
+static int sysctl_kern_timecounter_passthrough = 0;
+SYSCTL_INT(_kern_timecounter, OID_AUTO, passthrough, CTLFLAG_RW,
+	&sysctl_kern_timecounter_passthrough, 0,
+	"Select universal Feed-Forward timecounter for OS virtualization");
+
+
 /* Return current ffcounter value */
 ffcounter
 read_ffcounter(void)
 {
 	struct timehands *th;
 	struct fftimehands *ffth;
 	u_int gen, delta;
 	ffcounter ffcount;
+	struct timecounter *tc;
 
+	if ( sysctl_kern_timecounter_passthrough ) {
+		tc = timehands->th_counter;
+		return tc->tc_get_timecount_64(tc);
+	}
 	/*
 	 * ffclock_windup() called from tc_windup(), safe to rely on
 	 * th->th_generation only, for correct delta and ffcounter.
 	 */
-	do {
-		th = timehands;
-		gen = th->th_generation;
-		ffth = fftimehands;
-		delta = tc_delta(th);
-		ffcount = ffth->ffcount_mark;
-	} while (gen == 0 || gen != th->th_generation);
+	else {
+		do {
+			th = timehands;
+			gen = th->th_generation;
+			ffth = fftimehands;
+			delta = tc_delta(th);
+			ffcount = ffth->ffcount_mark;
+		} while (gen == 0 || gen != th->th_generation);
+	}
 
 	return (ffcount + delta);
 }
+
+static __inline uint64_t
+tc_get_timecount_fake64(struct timecounter *tc)
+{
+	u_int count;
+	count = tc->tc_get_timecount(tc);
+	return (uint64_t) count;
+}
 #endif /* FFCLOCK */
 
 
 /*
  * Initialize a new timecounter and possibly use it.
  */
 void
 tc_init(struct timecounter *tc)
 {
 	u_int u;
@@ -624,20 +645,27 @@ tc_init(struct timecounter *tc)
 			printf("Timecounter \"%s\" frequency %ju Hz",
 			    tc->tc_name, (uintmax_t)tc->tc_frequency);
 			printf(" -- Insufficient hz, needs at least %u\n", u);
 		}
 	} else if (tc->tc_quality >= 0 || bootverbose) {
 		printf("Timecounter \"%s\" frequency %ju Hz quality %d\n",
 		    tc->tc_name, (uintmax_t)tc->tc_frequency,
 		    tc->tc_quality);
 	}
 
+#ifdef FFCLOCK
+	/* XXX this is a very ugly but good enough to cover my back */
+	if ((strcmp(tc->tc_name, "TSC") != 0) && (strcmp(tc->tc_name, "ixen") != 0)) {
+		tc->tc_get_timecount_64 = &tc_get_timecount_fake64;
+	}
+#endif
+
 	tc->tc_next = timecounters;
 	timecounters = tc;
 	/*
 	 * Set up sysctl tree for this counter.
 	 */
 	tc_root = SYSCTL_ADD_NODE(NULL,
 	    SYSCTL_STATIC_CHILDREN(_kern_timecounter_tc), OID_AUTO, tc->tc_name,
 	    CTLFLAG_RW, 0, "timecounter description");
 	SYSCTL_ADD_UINT(NULL, SYSCTL_CHILDREN(tc_root), OID_AUTO,
 	    "mask", CTLFLAG_RD, &(tc->tc_counter_mask), 0,
Index: sys/sys/timetc.h
===================================================================
--- sys.orig/sys/timetc.h	2011-06-16 09:50:40.000000000 +1000
+++ sys/sys/timetc.h	2011-06-16 10:16:27.000000000 +1000
@@ -1,18 +1,24 @@
 /*-
  * ----------------------------------------------------------------------------
  * "THE BEER-WARE LICENSE" (Revision 42):
  * <phk@FreeBSD.ORG> wrote this file.  As long as you retain this notice you
  * can do whatever you want with this stuff. If we meet some day, and you think
  * this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
  * ----------------------------------------------------------------------------
  *
+ * Copyright (C) 2010 The University of Melbourne
+ * All rights reserved.
+ *
+ * Portions of this software were developed by the University of Melbourne
+ * under sponsorship from the FreeBSD Foundation.
+ *
  * $FreeBSD$
  */
 
 #ifndef _SYS_TIMETC_H_
 #define	_SYS_TIMETC_H_
 
 #ifndef _KERNEL
 #error "no user-serviceable parts inside"
 #endif
 
@@ -55,20 +61,28 @@ struct timecounter {
 		/*
 		 * Used to determine if this timecounter is better than
 		 * another timecounter higher means better.  Negative
 		 * means "only use at explicit request".
 		 */
 
 	void			*tc_priv;
 		/* Pointer to the timecounter's private parts. */
 	struct timecounter	*tc_next;
 		/* Pointer to the next timecounter. */
+#ifdef FFCLOCK
+	uint64_t (*tc_get_timecount_64) (struct timecounter *);
+		/*
+		 * This function reads the counter and return a 64 bit unsigned int.
+		 * It is used for the passthrough mode, required by feed-forward
+		 * clocks in a virtual system (eg. Xen)
+		 */
+#endif
 };
 
 extern struct timecounter *timecounter;
 extern int tc_min_ticktock_freq; /*
 				  * Minimal tc_ticktock() call frequency,
 				  * required to handle counter wraps.
 				  */
 
 u_int64_t tc_getfrequency(void);
 void	tc_init(struct timecounter *tc);
Index: sys/x86/x86/tsc.c
===================================================================
--- sys.orig/x86/x86/tsc.c	2011-06-16 09:50:40.000000000 +1000
+++ sys/x86/x86/tsc.c	2011-06-16 10:07:43.000000000 +1000
@@ -1,14 +1,20 @@
 /*-
  * Copyright (C) 1998-2003 Poul-Henning Kamp
  * All rights reserved.
  *
+ * Copyright (C) 2010 The University of Melbourne
+ * All rights reserved.
+ *
+ * Portions of this software were developed by the University of Melbourne
+ * under sponsorship from the FreeBSD Foundation.
+ *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in the
  *    documentation and/or other materials provided with the distribution.
  *
  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
@@ -67,28 +73,41 @@ SYSCTL_INT(_machdep, OID_AUTO, disable_t
     "Disable x86 Time Stamp Counter");
 TUNABLE_INT("machdep.disable_tsc", &tsc_disabled);
 
 static void tsc_freq_changed(void *arg, const struct cf_level *level,
     int status);
 static void tsc_freq_changing(void *arg, const struct cf_level *level,
     int *status);
 static	unsigned tsc_get_timecount(struct timecounter *tc);
 static void tsc_levels_changed(void *arg, int unit);
 
+#ifdef FFCLOCK
+static uint64_t tsc_get_timecount_64(struct timecounter *tc);
+static struct timecounter tsc_timecounter = {
+	.tc_get_timecount = tsc_get_timecount,
+	.tc_poll_pps = 0,
+	.tc_counter_mask = ~0u,
+	.tc_frequency = 0,
+	.tc_name = "TSC",
+	.tc_quality = 800,
+	.tc_get_timecount_64 = &tsc_get_timecount_64
+};
+#else
 static struct timecounter tsc_timecounter = {
 	tsc_get_timecount,	/* get_timecount */
 	0,			/* no poll_pps */
 	~0u,			/* counter_mask */
 	0,			/* frequency */
 	"TSC",			/* name */
 	800,			/* quality (adjusted in code) */
 };
+#endif
 
 void
 init_TSC(void)
 {
 	u_int64_t tscval[2];
 
 	if ((cpu_feature & CPUID_TSC) == 0 || tsc_disabled)
 		return;
 
 	if (bootverbose)
@@ -273,10 +292,18 @@ sysctl_machdep_tsc_freq(SYSCTL_HANDLER_A
 }
 
 SYSCTL_PROC(_machdep, OID_AUTO, tsc_freq, CTLTYPE_U64 | CTLFLAG_RW,
     0, 0, sysctl_machdep_tsc_freq, "QU", "");
 
 static unsigned
 tsc_get_timecount(struct timecounter *tc)
 {
 	return (rdtsc());
 }
+
+#ifdef FFCLOCK
+static uint64_t
+tsc_get_timecount_64(struct timecounter *tc)
+{
+	return (rdtsc());
+}
+#endif
