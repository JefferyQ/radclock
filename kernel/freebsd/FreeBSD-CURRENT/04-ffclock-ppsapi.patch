Modification to the PPS-API to support ffcounter timestamps

---
 kern/kern_tc.c |   38 +++++++++++++++++++++++++++++++++
 sys/timepps.h  |   64 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 102 insertions(+)

Index: sys/kern/kern_tc.c
===================================================================
--- sys.orig/kern/kern_tc.c	2010-12-10 14:15:47.000000000 +1100
+++ sys/kern/kern_tc.c	2010-12-10 15:04:48.000000000 +1100
@@ -882,6 +882,9 @@ pps_ioctl(u_long cmd, caddr_t data, stru
 {
 	pps_params_t *app;
 	struct pps_fetch_args *fapi;
+#ifdef FFCLOCK
+	struct ffclock_pps_fetch_args *ffclock_fapi;
+#endif
 #ifdef PPS_SYNC
 	struct pps_kcbind_args *kapi;
 #endif
@@ -915,6 +918,17 @@ pps_ioctl(u_long cmd, caddr_t data, stru
 		pps->ppsinfo.current_mode = pps->ppsparam.mode;
 		fapi->pps_info_buf = pps->ppsinfo;
 		return (0);
+#ifdef FFCLOCK
+	case FFCLOCK_PPS_IOC_FETCH:
+		ffclock_fapi = (struct ffclock_pps_fetch_args *)data;
+		if (ffclock_fapi->tsformat && ffclock_fapi->tsformat != PPS_TSFMT_TSPEC)
+			return (EINVAL);
+		if (ffclock_fapi->timeout.tv_sec || ffclock_fapi->timeout.tv_nsec)
+			return (EOPNOTSUPP);
+		pps->ppsinfo.current_mode = pps->ppsparam.mode;
+		ffclock_fapi->pps_info_buf = pps->ffclock_ppsinfo;
+		return (0);
+#endif 	/* FFCLOCK */
 	case PPS_IOC_KCBIND:
 #ifdef PPS_SYNC
 		kapi = (struct pps_kcbind_args *)data;
@@ -967,6 +981,12 @@ pps_event(struct pps_state *pps, int eve
 	u_int tcount, *pcount;
 	int foff, fhard;
 	pps_seq_t *pseq;
+#ifdef FFCLOCK
+	struct timespec *ffclock_tsp;
+	pps_seq_t *ffclock_pseq;
+	ffcounter_t *ffcounter;
+	ffcounter_t ffcounter_record;
+#endif
 
 	KASSERT(pps != NULL, ("NULL pps pointer in pps_event"));
 	/* If the timecounter was wound up underneath us, bail out. */
@@ -981,6 +1001,11 @@ pps_event(struct pps_state *pps, int eve
 		fhard = pps->kcmode & PPS_CAPTUREASSERT;
 		pcount = &pps->ppscount[0];
 		pseq = &pps->ppsinfo.assert_sequence;
+#ifdef FFCLOCK
+		ffcounter = &pps->ffclock_ppsinfo.assert_ffcounter;
+		ffclock_tsp = &pps->ffclock_ppsinfo.assert_timestamp;
+		ffclock_pseq = &pps->ffclock_ppsinfo.assert_sequence;
+#endif
 	} else {
 		tsp = &pps->ppsinfo.clear_timestamp;
 		osp = &pps->ppsparam.clear_offset;
@@ -988,6 +1013,11 @@ pps_event(struct pps_state *pps, int eve
 		fhard = pps->kcmode & PPS_CAPTURECLEAR;
 		pcount = &pps->ppscount[1];
 		pseq = &pps->ppsinfo.clear_sequence;
+#ifdef FFCLOCK
+		ffcounter = &pps->ffclock_ppsinfo.clear_ffcounter;
+		ffclock_tsp = &pps->ffclock_ppsinfo.clear_timestamp;
+		ffclock_pseq = &pps->ffclock_ppsinfo.clear_sequence;
+#endif
 	}
 
 	/*
@@ -1004,6 +1034,9 @@ pps_event(struct pps_state *pps, int eve
 	/* Convert the count to a timespec. */
 	tcount = pps->capcount - pps->capth->th_offset_count;
 	tcount &= pps->capth->th_counter->tc_counter_mask;
+#ifdef FFCLOCK
+	ffcounter_record = pps->capth->ffcounter_record;
+#endif
 	bt = pps->capth->th_offset;
 	bintime_addx(&bt, pps->capth->th_scale * tcount);
 	bintime_add(&bt, &boottimebin);
@@ -1016,6 +1049,11 @@ pps_event(struct pps_state *pps, int eve
 	*pcount = pps->capcount;
 	(*pseq)++;
 	*tsp = ts;
+#ifdef FFCLOCK
+	(*ffclock_pseq)++;
+	*ffclock_tsp = ts;
+	*ffcounter = (ffcounter_record + tcount);
+#endif
 
 	if (foff) {
 		timespecadd(tsp, osp);
Index: sys/sys/timepps.h
===================================================================
--- sys.orig/sys/timepps.h	2010-12-10 09:19:15.000000000 +1100
+++ sys/sys/timepps.h	2010-12-10 15:08:03.000000000 +1100
@@ -6,6 +6,12 @@
  * this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
  * ----------------------------------------------------------------------------
  *
+ * Copyright (C) 2010 The University of Melbourne
+ * All rights reserved.
+ *
+ * Portions of this software were developed by the University of Melbourne
+ * under sponsorship from the FreeBSD Foundation.
+ *
  * $FreeBSD: src/sys/sys/timepps.h,v 1.19 2005/01/07 02:29:24 imp Exp $
  *
  * The is a FreeBSD version of the RFC 2783 API for Pulse Per Second 
@@ -15,6 +21,8 @@
 #ifndef _SYS_TIMEPPS_H_
 #define _SYS_TIMEPPS_H_
 
+#include "opt_ffclock.h"
+
 #include <sys/ioccom.h>
 #include <sys/time.h>
 
@@ -43,12 +51,34 @@ typedef struct {
 	int		current_mode;		/* current mode bits */
 } pps_info_t;
 
+
+#ifdef FFCLOCK
+typedef union pps_ffcounteru {
+	ffcounter_t ffcounter;
+} pps_ffcounteru_t;
+
+typedef struct {
+	pps_seq_t	assert_sequence;	/* assert event seq # */
+	pps_seq_t	clear_sequence;		/* clear event seq # */
+	pps_timeu_t	assert_tu;
+	pps_timeu_t	clear_tu;
+	int		current_mode;		/* current mode bits */
+	pps_ffcounteru_t  assert_vcu;
+	pps_ffcounteru_t  clear_vcu;
+} ffclock_pps_info_t;
+#endif	/* FFCLOCK */
+
 #define assert_timestamp        assert_tu.tspec
 #define clear_timestamp         clear_tu.tspec
 
 #define assert_timestamp_ntpfp  assert_tu.ntpfp
 #define clear_timestamp_ntpfp   clear_tu.ntpfp
 
+#ifdef FFCLOCK
+#define assert_ffcounter	assert_vcu.ffcounter
+#define clear_ffcounter		clear_vcu.ffcounter
+#endif 	/* FFCLOCK */
+
 typedef struct {
 	int api_version;			/* API version # */
 	int mode;				/* mode bits */
@@ -89,6 +119,14 @@ struct pps_fetch_args {
 	struct timespec	timeout;
 };
 
+#ifdef FFCLOCK
+struct ffclock_pps_fetch_args {
+	int tsformat;
+	ffclock_pps_info_t	pps_info_buf;
+	struct timespec	timeout;
+};
+#endif	/* FFCLOCK */
+
 struct pps_kcbind_args {
 	int kernel_consumer;
 	int edge;
@@ -102,6 +140,9 @@ struct pps_kcbind_args {
 #define PPS_IOC_GETCAP		_IOR('1', 5, int)
 #define PPS_IOC_FETCH		_IOWR('1', 6, struct pps_fetch_args)
 #define PPS_IOC_KCBIND		_IOW('1', 7, struct pps_kcbind_args)
+#ifdef FFCLOCK
+#define FFCLOCK_PPS_IOC_FETCH		_IOWR('1', 8, struct ffclock_pps_fetch_args)
+#endif 	/* FFCLOCK */
 
 #ifdef _KERNEL
 
@@ -114,6 +155,9 @@ struct pps_state {
 	/* State information. */
 	pps_params_t	ppsparam;
 	pps_info_t	ppsinfo;
+#ifdef FFCLOCK
+	ffclock_pps_info_t	ffclock_ppsinfo;
+#endif 	/* FFCLOCK */
 	int		kcmode;
 	int		ppscap;
 	struct timecounter *ppstc;
@@ -183,6 +227,26 @@ time_pps_fetch(pps_handle_t handle, cons
 	return (error);
 }
 
+#ifdef FFCLOCK
+static __inline int
+ffclock_pps_fetch(pps_handle_t handle, const int tsformat,
+	ffclock_pps_info_t *ppsinfobuf, const struct timespec *timeout)
+{
+	int error;
+	struct ffclock_pps_fetch_args arg;
+
+	arg.tsformat = tsformat;
+	if (timeout == NULL) {
+		arg.timeout.tv_sec = -1;
+		arg.timeout.tv_nsec = -1;
+	} else
+		arg.timeout = *timeout;
+	error = ioctl(handle, FFCLOCK_PPS_IOC_FETCH, &arg);
+	*ppsinfobuf = arg.pps_info_buf;
+	return (error);
+}
+#endif 	/* FFCLOCK */
+
 static __inline int
 time_pps_kcbind(pps_handle_t handle, const int kernel_consumer,
 	const int edge, const int tsformat)
