FFclock core

Core set of changes to support a feed-forward clock within the kernel.

---
 conf/NOTES      |    8 +
 conf/options    |    1 
 kern/kern_tc.c  |  261 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 kern/subr_rtc.c |    8 +
 sys/timeff.h    |   70 +++++++++++++++
 5 files changed, 348 insertions(+)

Index: sys/kern/kern_tc.c
===================================================================
--- sys.orig/kern/kern_tc.c	2010-12-23 17:10:37.000000000 +1100
+++ sys/kern/kern_tc.c	2010-12-23 17:22:04.000000000 +1100
@@ -5,12 +5,19 @@
  * can do whatever you want with this stuff. If we meet some day, and you think
  * this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
  * ----------------------------------------------------------------------------
+ *
+ * Copyright (C) 2010 The University of Melbourne
+ * All rights reserved.
+ *
+ * Portions of this software were developed by the University of Melbourne
+ * under sponsorship from the FreeBSD Foundation.
  */
 
 #include <sys/cdefs.h>
 __FBSDID("$FreeBSD: src/sys/kern/kern_tc.c,v 1.196 2010/11/23 04:50:01 cperciva Exp $");
 
 #include "opt_ntp.h"
+#include "opt_ffclock.h"
 
 #include <sys/param.h>
 #include <sys/kernel.h>
@@ -21,6 +28,10 @@ __FBSDID("$FreeBSD: src/sys/kern/kern_tc
 #include <sys/timetc.h>
 #include <sys/timex.h>
 
+#ifdef FFCLOCK
+#include <sys/timeff.h>
+#endif	/* FFCLOCK */
+
 /*
  * A large step happens on boot.  This constant detects such steps.
  * It is relatively small so that ntp_update_second gets called enough
@@ -83,6 +94,7 @@ static struct timehands th0 = {
 	&th1
 };
 
+
 static struct timehands *volatile timehands = &th0;
 struct timecounter *timecounter = &dummy_timecounter;
 static struct timecounter *timecounters = &dummy_timecounter;
@@ -300,6 +312,246 @@ getmicrotime(struct timeval *tvp)
 	} while (gen == 0 || gen != th->th_generation);
 }
 
+
+#ifdef FFCLOCK
+/*
+ * Support for feed-forward synchronization algorithms.
+ * This is heavily inspired by the timehands mechanism but kept independent from
+ * it. *_winup() functions have some connection to avoid accessing the
+ * timecounter hardware more than necessary.
+ */
+
+/*
+ * Feed-Forward Clock
+ * Global estimates updated by the synchronization daemon or ffclock_set().
+ */
+
+struct ffclock_estimate ffclock;
+uint8_t ffclock_fetch_update;
+
+struct fftimehands
+{
+	struct ffclock_estimate cest;
+	ffcounter_t ffcounter_mark;
+	struct bintime time_mark;
+	volatile uint8_t gen;
+	struct fftimehands *next;
+};
+
+static struct fftimehands ffth0;
+static struct fftimehands ffth1;
+static struct fftimehands ffth2;
+static struct fftimehands ffth3;
+static struct fftimehands ffth4;
+static struct fftimehands ffth5;
+static struct fftimehands ffth6;
+static struct fftimehands ffth7;
+static struct fftimehands ffth8;
+static struct fftimehands ffth9;
+
+static struct fftimehands *volatile fftimehands = &ffth0;
+
+
+static void
+ffclock_init(void)
+{
+	memset(&ffth0, 0, sizeof(struct fftimehands));
+	memset(&ffth1, 0, sizeof(struct fftimehands));
+	memset(&ffth2, 0, sizeof(struct fftimehands));
+	memset(&ffth3, 0, sizeof(struct fftimehands));
+	memset(&ffth4, 0, sizeof(struct fftimehands));
+	memset(&ffth5, 0, sizeof(struct fftimehands));
+	memset(&ffth6, 0, sizeof(struct fftimehands));
+	memset(&ffth7, 0, sizeof(struct fftimehands));
+	memset(&ffth8, 0, sizeof(struct fftimehands));
+	memset(&ffth9, 0, sizeof(struct fftimehands));
+	ffth0.next = &ffth1;
+	ffth1.next = &ffth2;
+	ffth2.next = &ffth3;
+	ffth3.next = &ffth4;
+	ffth4.next = &ffth5;
+	ffth5.next = &ffth6;
+	ffth6.next = &ffth7;
+	ffth7.next = &ffth8;
+	ffth8.next = &ffth9;
+	ffth9.next = &ffth0;
+
+	ffclock_fetch_update = 0;
+}
+
+
+/*
+ * Set the ffclock.
+ * Called from inittodr() to get things kickstarted.
+ * Use timecounter nominal frequency as first period estimate.
+ * XXX last_update is fine as it is?
+ * Note: this may be called several time just after boot.
+ */
+void
+ffclock_set(struct timespec *ts)
+{
+	struct timecounter *tc;
+	tc = timehands->th_counter;
+
+	timespec2bintime(ts, &(ffclock.time));
+	ffclock.period = ((1LLU << 63) / tc->tc_frequency ) << 1;
+	ffclock.status = 0;
+	ffclock.error_bound_avg = 0;
+
+	ffclock_fetch_update = 1;
+
+	printf("FFclock: %s - period = %llu (%llu Hz), time = %lu.%09lu\n",
+			tc->tc_name,
+			(long long unsigned) ffclock.period,
+			(long long unsigned) tc->tc_frequency,
+			(long unsigned) ts->tv_sec,
+			(long unsigned) ts->tv_nsec);
+}
+
+
+/*
+ * Update the fftimehands.
+ * If a new clock estimate has been passed by the synchronisation daemon, make
+ * it current.
+ * Update the time mark based on current clock estimate. The conversion from
+ * ffcounter to bintime relies on the difference clock principle. The interval
+ * size between two ffcounter readings should remain small enough.
+ */
+static void
+ffclock_windup(u_int ffdelta)
+{
+	struct ffclock_estimate *cest;
+	struct fftimehands *ffth;
+	struct bintime delta;
+	uint8_t ogen;
+
+	ffth = fftimehands->next;
+	ogen = ffth->gen;
+	ffth->gen = 0;
+	cest = &(ffth->cest);
+
+	ffth->ffcounter_mark = fftimehands->ffcounter_mark;
+	ffth->ffcounter_mark += ffdelta;
+
+	/*
+	 * If the clock has been updated by the synchronisation daemon, make the
+	 * updated clock estimate the current one and increment generation.
+	 */
+	/* Update ffcounter and time marks of next fftimehands */
+	if ( ffclock_fetch_update )
+	{
+		bcopy(&ffclock, cest, sizeof(struct ffclock_estimate));
+		ffdelta = ffth->ffcounter_mark - cest->last_update;
+		ffth->time_mark = cest->time;
+		ffclock_fetch_update = 0;
+	}
+	else {
+		bcopy(&(fftimehands->cest), cest, sizeof(struct ffclock_estimate));
+		ffth->time_mark = fftimehands->time_mark;
+	}
+
+	delta.sec = 0;
+	delta.frac = cest->period;
+	bintime_mul(&delta, ffdelta);
+	bintime_add(&(ffth->time_mark), &delta);
+
+	if (++ogen == 0)
+		ogen = 1;
+	ffth->gen = ogen;
+
+	fftimehands = ffth;
+}
+
+
+/*
+ * Adjust the fftimehands when the timecounter is changed.
+ * This is a fairly radical operation for a feed-forward synchronization daemon.
+ * The best thing may be to trigger a restart?
+ * XXX Time in second is preserved here, but ffcounter_mark is effectively wrong
+ * since tc_windup() changed th_offset_count to ncount. This results in a jump
+ * next time ffdelta is computed ... still thinking about the best strategy.
+ */
+static void
+ffclock_change_tc(struct timehands *th, u_int ncount)
+{
+	struct fftimehands *ffth;
+	struct ffclock_estimate *cest;
+	uint8_t ogen;
+
+	ffth = fftimehands->next;
+	ogen = ffth->gen;
+	ffth->gen = 0;
+
+	cest = &(ffth->cest);
+	bcopy(&(fftimehands->cest), cest, sizeof(struct ffclock_estimate));
+	ffth->time_mark = fftimehands->time_mark;
+
+	// TODO take ncount into account here?
+	ffth->ffcounter_mark = fftimehands->ffcounter_mark;
+
+	cest->period = ((1LLU << 63) / th->th_counter->tc_frequency ) << 1;
+	cest->status = 0;
+	cest->error_bound_avg = 0;
+
+	if (++ogen == 0)
+		ogen = 1;
+	ffth->gen = ogen;
+
+	fftimehands = ffth;
+}
+
+
+/* Convert ffounter to bintime using current ffclock estimate */
+void
+ffcounter2bintime(ffcounter_t *ffcounter, struct bintime *bt)
+{
+	struct fftimehands *ffth;
+	u_int ffdelta;
+	struct bintime delta;
+	uint8_t gen;
+
+	/* No locking but check generation has not changed. */
+	do {
+		ffth = fftimehands;
+		gen = ffth->gen;
+
+		ffdelta = *ffcounter - ffth->ffcounter_mark;
+		delta.sec = 0;
+		delta.frac = ffth->cest.period;
+		bintime_mul(&delta, ffdelta);
+		*bt = ffth->time_mark;
+		bintime_add(bt, &delta);
+
+	} while (gen == 0 || gen != ffth->gen);
+}
+
+
+/* Return current ffcounter value */
+ffcounter_t
+read_ffcounter(void)
+{
+	struct timehands *th;
+	struct fftimehands *ffth;
+	u_int gen, delta;
+	ffcounter_t ffcounter;
+
+	/*
+	 * ffclock_windup() called from tc_windup(), safe to rely on
+	 * th->th_generation only, for correct delta and ffcounter.
+	 */
+	do {
+		th = timehands;
+		gen = th->th_generation;
+		ffth = fftimehands;
+		delta = tc_delta(th);
+		ffcounter = ffth->ffcounter_mark;
+	} while ( gen == 0 || gen != th->th_generation);
+
+	return(ffcounter + delta);
+}
+#endif	/* FFCLOCK */
+
+
 /*
  * Initialize a new timecounter and possibly use it.
  */
@@ -440,6 +692,9 @@ tc_windup(void)
 		ncount = timecounter->tc_get_timecount(timecounter);
 	else
 		ncount = 0;
+#ifdef FFCLOCK
+	ffclock_windup(delta);
+#endif
 	th->th_offset_count += delta;
 	th->th_offset_count &= th->th_counter->tc_counter_mask;
 	while (delta > th->th_counter->tc_frequency) {
@@ -496,6 +751,9 @@ tc_windup(void)
 		th->th_offset_count = ncount;
 		tc_min_ticktock_freq = max(1, timecounter->tc_frequency /
 		    (((uint64_t)timecounter->tc_counter_mask + 1) / 3));
+#ifdef FFCLOCK
+		ffclock_change_tc(th, ncount);
+#endif
 	}
 
 	/*-
@@ -814,6 +1072,9 @@ inittimecounter(void *dummy)
 	p = (tc_tick * 1000000) / hz;
 	printf("Timecounters tick every %d.%03u msec\n", p / 1000, p % 1000);
 
+#ifdef FFCLOCK
+	ffclock_init();
+#endif
 	/* warm up new timecounter (again) and get rolling. */
 	(void)timecounter->tc_get_timecount(timecounter);
 	(void)timecounter->tc_get_timecount(timecounter);
Index: sys/conf/NOTES
===================================================================
--- sys.orig/conf/NOTES	2010-12-23 17:10:37.000000000 +1100
+++ sys/conf/NOTES	2010-12-23 17:11:59.000000000 +1100
@@ -1178,6 +1178,14 @@ options 	HZ=100
 
 options 	PPS_SYNC
 
+# Enable support for generic Feed-Forward clocks in the kernel.
+# The feed-forward clock support is an alternative to the feedback oriented
+# ntpd/system clock approach, and is to be used with a feed-forward
+# synchronization algorithm such as the RADclock:
+# More info there: http://www.synclab.org/radclock
+
+options 	FFCLOCK
+
 
 #####################################################################
 # SCSI DEVICES
Index: sys/conf/options
===================================================================
--- sys.orig/conf/options	2010-12-23 17:10:37.000000000 +1100
+++ sys/conf/options	2010-12-23 17:11:59.000000000 +1100
@@ -75,6 +75,7 @@ COMPRESS_USER_CORES opt_core.h
 CY_PCI_FASTINTR
 DEADLKRES	opt_watchdog.h
 DIRECTIO
+FFCLOCK		opt_ffclock.h
 FULL_PREEMPTION	opt_sched.h
 IPI_PREEMPTION	opt_sched.h
 GEOM_AES	opt_geom.h
Index: sys/kern/subr_rtc.c
===================================================================
--- sys.orig/kern/subr_rtc.c	2010-12-23 17:10:37.000000000 +1100
+++ sys/kern/subr_rtc.c	2010-12-23 17:11:59.000000000 +1100
@@ -60,6 +60,11 @@ __FBSDID("$FreeBSD: src/sys/kern/subr_rt
 
 #include "clock_if.h"
 
+#include "opt_ffclock.h"
+#ifdef FFCLOCK
+#include <sys/timeff.h>
+#endif
+
 static device_t clock_dev = NULL;
 static long clock_res;
 static struct timespec clock_adj;
@@ -133,6 +138,9 @@ inittodr(time_t base)
 	ts.tv_sec += utc_offset();
 	timespecadd(&ts, &clock_adj);
 	tc_setclock(&ts);
+#ifdef FFCLOCK
+	ffclock_set(&ts);
+#endif
 	return;
 
 wrong_time:
Index: sys/sys/timeff.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ sys/sys/timeff.h	2010-12-23 17:11:59.000000000 +1100
@@ -0,0 +1,70 @@
+/*-
+ * Copyright (C) 2010 University of Melbourne
+ * All rights reserved.
+ *
+ * This software was developed by the University of Melbourne under sponsorship from
+ * the FreeBSD Foundation.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+
+#ifndef _SYS_TIMEFF_H_
+#define _SYS_TIMEFF_H_
+
+#include <sys/time.h>
+
+#if __BSD_VISIBLE
+
+/*
+ * Feed-forward Clock synchronization support
+ *
+ * Basic component is a wide monotonically increasing counter that accumulates
+ * at the same rate as the selected timecounter.
+ */
+typedef uint64_t ffcounter_t;
+
+/*
+ * Feed-Forward Clock estimate
+ * Holds time mark as a ffcounter and conversion to bintime based on current
+ * timecounter period and offset estimate passed by the synchronization daemon.
+ * Provides time of last daemon update, clock status and bound on error.
+ */
+struct ffclock_estimate
+{
+	struct bintime time;
+	uint64_t period;
+	ffcounter_t last_update;
+	uint32_t status;
+	uint32_t error_bound_avg;
+};
+
+/* Resets the feed-forward clock */
+void ffclock_set(struct timespec *ts);
+
+/* Get and convert ffcounter to bintime based on current ffclock estimate. */
+ffcounter_t read_ffcounter(void);
+
+void ffcounter2bintime(ffcounter_t *ffcounter, struct bintime *bt);
+
+#endif
+#endif
