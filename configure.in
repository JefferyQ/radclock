
# Copyright (C) 2006-2011 Julien Ridoux <julien@synclab.org>
#
# This file is part of the radclock program.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# Process this file with autoconf to produce a configure script.
# Requires autoconf >=2.57
# Requires automake >=1.8

dnl Check for autoconf version
AC_PREREQ(2.57)

AC_INIT(radclock, 0.4.x, [julien@synclab.org], radclock, http://www.synclab.org/radclock/)

dnl This should set the target_cpu, target_os and target_vendor variables
AC_CANONICAL_TARGET

dnl Init and check for automake version
AM_INIT_AUTOMAKE(1.8)

dnl Init libtool magic
AC_PROG_LIBTOOL


dnl ===========================================================================
dnl Project internals: define directories with friends to compile 
dnl ===========================================================================

AC_CONFIG_SRCDIR(radclock/radclock_main.c)
AC_CONFIG_FILES([Makefile libradclock/Makefile radclock/Makefile examples/Makefile man/Makefile tests/Makefile])

dnl Conditional for the autotools that are not shipped away 
if test -d autotools; then
	AM_CONDITIONAL([HAVE_AUTOTOOLS_DIR], [test 1 = 1])
else
	AM_CONDITIONAL([HAVE_AUTOTOOLS_DIR], [test 0 = 1])
fi


AC_CHECK_HEADER([_ffcounter.h],
	[AM_CONDITIONAL([HAVE__FFCOUNTER_H], [test 1 = 1])], 
	[AM_CONDITIONAL([HAVE__FFCOUNTER_H], [test 1 = 0])])


AM_CONFIG_HEADER(config.h)

LIBRADCLOCK_LIBS="\$(top_builddir)/libradclock/libradclock.la"





dnl ===========================================================================
dnl Extra option to the configure script 
dnl ===========================================================================

AC_ARG_WITH([jdebug],
		[AS_HELP_STRING([--with-jdebug], [Extra debug output (developper only)])], 
		[jdebug=yes],[jdebug=no])

if test "$jdebug" = "yes"; then
	AC_DEFINE([WITH_JDEBUG], [1], [Define to 1 if with extra debug output])
fi

dnl Kernel support forced or auto-detect  
AC_ARG_WITH([radclock-kernel],
		[AS_HELP_STRING([--with-radclock-kernel], [Force compilation of radclock kernel support])], 
		[tscexts=yes],[tscexts=no])





dnl ===========================================================================
dnl Variables that will be exported in all makefiles
dnl ===========================================================================

AC_SUBST([ADD_INCLS])
AC_SUBST([ADD_LIBS])
AC_SUBST([PACKAGE_NAME])
AC_SUBST([PACKAGE_VERSION])
AC_SUBST([CFLAGS], "${CFLAGS} -Wall -g")




dnl ===========================================================================
dnl Generic tests
dnl ===========================================================================
dnl XXX Do we need all these, do we act on these?
AC_PROG_CC
AC_PROG_INSTALL
AC_C_CONST
AC_C_INLINE
AC_C_BIGENDIAN
AC_TYPE_SIZE_T
AC_SYS_LARGEFILE

AC_PROG_GCC_TRADITIONAL
AC_CHECK_FUNCS(socket strdup strlcpy mkstemps mkstemp)

dnl Check requires types. Error output if not correct.
AC_CHECK_SIZEOF([int])
AC_CHECK_SIZEOF([long long int])

AC_HEADER_TIME
AC_CHECK_HEADERS(ifaddrs.h)






dnl ===========================================================================
dnl rdtsc() detection. Always messy, different for OS detected by autoconf
dnl ===========================================================================
case $target_os in

	freebsd*)
		AC_CHECK_HEADERS([sys/timeffc.h])
		AC_CHECK_HEADERS([sys/types.h])
		AC_CHECK_HEADERS([machine/cpufunc.h], [], [],
		[#ifdef HAVE_SYS_TYPES_H
		 #include <sys/types.h>
		 #endif
		])
		AC_CHECK_DECL([rdtsc],
			[AC_DEFINE([HAVE_RDTSC], [1],[Define to 1 if you have rdtsc()])],
			[],
			[#include <sys/types.h>
		 	#include <machine/cpufunc.h>
			]
		)
		;;

dnl 3 headers to test in Linux, but seems it is not available anymore anyway
	linux*)
		AC_CHECK_HEADER([asm/msr.h])
		if test "$ac_cv_header_asm_msr_h" = "yes"; then
			AC_CHECK_DECL([rdtscll],
			[AC_DEFINE([HAVE_RDTSCLL_ASM], [1],
					   [Define to 1 if you have rdtscll() in asm/msr.h])],
			[], [#include <asm/msr.h>])
		fi

		AC_CHECK_HEADER([asm-x86/msr.h])
		if test "$ac_cv_header_asm_x86_msr_h" = "yes"; then
			AC_CHECK_DECL([rdtscll],
			[AC_DEFINE([HAVE_RDTSCLL_ASM_X86], [1],
					   [Define to 1 if you have rdtscll() in asm-x86/msr.h])],
			[], [#include <asm-x86/msr.h>])
		fi

		AC_CHECK_HEADER([asm-x86_64/msr.h])
		if test "$ac_cv_header_asm_x86_64_msr_h" = "yes"; then
			AC_CHECK_DECL([rdtscll],
			[AC_DEFINE([HAVE_RDTSCLL_ASM_X86_64], [1],
					   [Define to 1 if you have rdtscll() in asm-x86_64/msr.h])],
			[], [#include <asm-x86_64/msr.h>])
		fi
	 ;;

	*)
	;;
esac





dnl ===========================================================================
dnl Check for correct version of libpcap
dnl ===========================================================================
pcap_ok=1
AC_CHECK_HEADER(pcap.h, [], [pcap_ok=0])
AC_CHECK_LIB(pcap, pcap_next_ex,,pcap_ok=0)
AC_CHECK_LIB(pcap, pcap_dump_flush,,pcap_ok=0)

dnl check if we have libpcap version >= 1.0.0. It is essential for Linux MMAP support
dnl pcap_activate does not exist in previous versions
dnl need AC_CHECK_LIB beforehand
AC_CHECK_FUNCS(pcap_activate)




dnl ===========================================================================
dnl pps api ? Freebsd only so far
dnl ===========================================================================
AC_CHECK_HEADER(sys/timepps.h, 
				[AM_CONDITIONAL([HAVE_PPS_API], [test 1 = 1])], 
				[AM_CONDITIONAL([HAVE_PPS_API], [test 0 = 1])])



dnl ===========================================================================
dnl Xen??
dnl ===========================================================================
AC_CHECK_LIB(xenstore, xs_domain_open,
			 [AM_CONDITIONAL([HAVE_XEN_API], [test 1 = 1])
			 	AC_DEFINE([WITH_XENSTORE],[1],[Define to 1 if compiling with xenstore]) ],
			 [AM_CONDITIONAL([HAVE_XEN_API], [test 0 = 1])])




dnl ===========================================================================
dnl OS version, RADclock patched? and version
dnl ===========================================================================
if test "$tscexts" = "no"; then	
case "$target_os" in
	linux*)
		osversion=$(uname -r | sed -e 's/\([0-9]*.[0-9]*.[0-9]*\)-.*/\1/')
		if test -e /sys/devices/system/ffclock/ffclock0/version; then
			tscexts=yes
			ffsupportversion=`cat /sys/devices/system/ffclock/ffclock0/version`
		else
			if test -e  /proc/sys/net/core/radclock_default_tsmode ; then
				tscexts=yes
				ffsupportversion=0
			fi
		fi
		;;

	freebsd*)
		osversion=$(uname -r | sed -e 's/\([0-9]*.[0-9]*\)-.*/\1/')

		# Version 2 and 3
		ffsupportversion=`sysctl -n kern.sysclock.ffclock.version`
		if test $ffsupportversion ; then
			tscexts=yes
		else
			# Version 1 
			ffsupportversion=`sysctl -n kern.ffclock.version`
			if test $ffsupportversion ; then
				tscexts=yes
			else
				ext=`sysctl -n net.bpf.bpf_radclock_tsmode`
				if test $ext ; then
					tscexts=yes
					ffsupportversion=0
				fi
			fi
		fi
		;;
esac
fi

AM_CONDITIONAL(HAVE_FFKERNEL, test "x$tscexts" = "xyes")




dnl ===========================================================================
dnl Detect kernel channel
dnl ===========================================================================
case $target_os in

	linux*)
		netlink=yes

		AC_CHECK_HEADERS([linux/netlink.h], [], [netlink=no], [#include <sys/socket.h>])
		AC_CHECK_HEADERS([netlink/netlink.h], [], [netlink=no], [#include <sys/socket.h>])
		AC_CHECK_HEADERS([linux/genetlink.h], [], [netlink=no], [#include <sys/socket.h>])
		AC_CHECK_LIB(nl,nl_handle_alloc,, netlink=no)
		AC_MSG_CHECKING([nl_recv for four or three params])
		AC_COMPILE_IFELSE( AC_LANG_PROGRAM([#include <sys/socket.h>
							 #include <linux/netlink.h>
							 #include <netlink/netlink.h>],
							 [nl_recv(NULL,NULL,NULL,NULL);]), nl_recv=four, nl_recv=unknown)
		if test "${nl_recv}" = "four"; then
			AC_DEFINE([WITH_NL_RECV_FOUR_PARM],[],[nl_recv takes 4 params])
			AC_MSG_RESULT([four])
		else
			AC_MSG_RESULT([three])
		fi

			
		if test "${netlink}" = "no"; then
			AC_DEFINE([WITH_RADKERNEL_NONE],[1],[Define to 1 if NOT detected patched radclock kernel])
			kernel_channel="no"
		else
			kernel_channel="yes"
			if test "$tscexts" = "yes"; then
				LIBRADCLOCK_LIBS="${LIBRADCLOCK_LIBS} -lnl"
				AC_DEFINE([WITH_RADKERNEL_LINUX], [1], [Define to 1 if detected patched radclock kernel])
			else
				AC_DEFINE([WITH_RADKERNEL_NONE],[1],[Define to 1 if NOT detected patched radclock kernel])
			fi

		fi

		;;


	freebsd*)

	if test "$tscexts" = yes; then
		AC_DEFINE([WITH_RADKERNEL_FBSD], [1], [Define to 1 if detected patched radclock kernel])
		kernel_channel="yes"
	else
		AC_DEFINE([WITH_RADKERNEL_NONE], [1], [Define to 1 if NOT detected patched radclock kernel])
		kernel_channel="no"
	fi
	;;

	# Darwin* and other OS without kernel extensions
	unknown*)
		AC_DEFINE([WITH_RADKERNEL_NONE],[1],[Define to 1 if NOT detected patched radclock kernel])
		kernel_channel="no"
	;;
esac


AC_SUBST([LIBRADCLOCK_LIBS])




dnl ===========================================================================
dnl Initialise IOCTLs
dnl ===========================================================================

ioctlcount=0
syscall_get_vcounter_number=0
syscall_get_vcounter_latency_number=0

if test "$tscexts" = "yes"; then
case "$target_os" in
	freebsd*)
		case "$osversion" in
			# Sysctl for 6.x kernels 
			6*)
				ioctlcount=124
				;;
			# Sysctl for 7.x kernels 
			7*)
				ioctlcount=125
				;;
			# Sysctl for 8.x kernels 
			8*)
				ioctlcount=131
				;;
			# Sysctl for 9.x kernels 
## XXX TODO this should disappear with kernel version > 1 once we get read of IOCTL 
			9*)
				ioctlcount=133
				;;
			*)
				ioctlcount=0
				;;
		esac
		AC_DEFINE_UNQUOTED([FREEBSD_RADCLOCK_IOCTL],$ioctlcount,[Define the first radclock specific ioctl number (freebsd specific)])
		;;
	
	linux*)
		case "$osversion" in
			2.6.26*)

				# Set the SYSCALL numbers
				case "$target_cpu" in
					i386 | i486 | i586 | i686)
						syscall_get_vcounter_number=327
						syscall_get_vcounter_latency_number=328
					;;
					x86_64)
						syscall_get_vcounter_number=288
						syscall_get_vcounter_latency_number=289
					;;
				esac
			;;	
			2.6.27*)
				# Set the SYSCALL numbers
				case "$target_cpu" in
					i386 | i486 | i586 | i686)
						syscall_get_vcounter_number=333
						syscall_get_vcounter_latency_number=334
					;;
					x86_64)
						syscall_get_vcounter_number=295
						syscall_get_vcounter_latency_number=296
					;;
				esac
			;;	
			2.6.28*)
				# Set the SYSCALL numbers
				case "$target_cpu" in
					i386 | i486 | i586 | i686)
						syscall_get_vcounter_number=333
						syscall_get_vcounter_latency_number=334
					;;
					x86_64)
						syscall_get_vcounter_number=295
						syscall_get_vcounter_latency_number=296
					;;
				esac
			;;	
			2.6.29*)
				# Set the SYSCALL numbers
				case "$target_cpu" in
					i386 | i486 | i586 | i686)
						syscall_get_vcounter_number=333
						syscall_get_vcounter_latency_number=334
					;;
					x86_64)
						syscall_get_vcounter_number=295
						syscall_get_vcounter_latency_number=296
					;;
				esac
			;;	
			2.6.30*)
				# Set the SYSCALL numbers
				case "$target_cpu" in
					i386 | i486 | i586 | i686)
						syscall_get_vcounter_number=335
						syscall_get_vcounter_latency_number=336
					;;
					x86_64)
						syscall_get_vcounter_number=297
						syscall_get_vcounter_latency_number=298
					;;
				esac
			;;	
			2.6.31*)
				# Set the SYSCALL numbers
				case "$target_cpu" in
					i386 | i486 | i586 | i686)
						syscall_get_vcounter_number=337
						syscall_get_vcounter_latency_number=338
					;;
					x86_64)
						syscall_get_vcounter_number=299
						syscall_get_vcounter_latency_number=300
					;;
				esac
			;;	
			2.6.32*)
				# Set the SYSCALL numbers
				case "$target_cpu" in
					i386 | i486 | i586 | i686)
						syscall_get_vcounter_number=337
						syscall_get_vcounter_latency_number=338
					;;
					x86_64)
						syscall_get_vcounter_number=299
						syscall_get_vcounter_latency_number=300
					;;
				esac
			;;	
			3.2.2*)
				# Set the SYSCALL numbers
				case "$target_cpu" in
					i386 | i486 | i586 | i686)
						syscall_get_vcounter_number=349
						syscall_get_vcounter_latency_number=350
					;;
					x86_64)
						syscall_get_vcounter_number=312
						syscall_get_vcounter_latency_number=313
					;;
				esac
			;;	
			*)
				syscall_get_vcounter_number=0
				syscall_get_vcounter_latency_number=0
			;;
		esac
		AC_DEFINE_UNQUOTED([LINUX_SYSCALL_GET_VCOUNTER],$syscall_get_vcounter_number,[Define get_vcounter_syscall number (Linux specific)])
		AC_DEFINE_UNQUOTED([LINUX_SYSCALL_GET_VCOUNTER_LATENCY],$syscall_get_vcounter_latency_number,[Define get_vcounter_latency_syscall number (Linux specific)])
		;;
esac
fi







dnl ===========================================================================
dnl Summary of all we have done so far
dnl ===========================================================================

AC_OUTPUT

AC_MSG_NOTICE([----------------------------------------])
AC_MSG_NOTICE([RADClock version $PACKAGE_VERSION])
AC_MSG_NOTICE([Found target arch: $target_cpu])
AC_MSG_NOTICE([Compiling for $target_os])
AC_MSG_NOTICE([Detected kernel RADClock extensions: $tscexts (version: $ffsupportversion)])
AC_MSG_NOTICE([Detected kernel access channel: $kernel_channel])

case $target_os in
	
	linux*)
	if test "$tscexts" = yes
	then
		AC_MSG_NOTICE([get_counter syscall number: $syscall_get_vcounter_number])
		AC_MSG_NOTICE([get_counter_latency syscall number: $syscall_get_vcounter_latency_number])
		if test "$netlink" = no
		then
		AC_MSG_NOTICE([**ERROR** - Netlink library (libnl) not found])
		fi
	fi
	;;

	freebsd*)
	if test "$tscexts" = yes
	then
		AC_MSG_NOTICE([ioctl Count Starting At $ioctlcount])
	fi
	;;

	*)
	;;
esac




if test $pcap_ok -lt 1
then 
	AC_MSG_NOTICE([**ERROR** - libpcap has not been detected or version too old (requires 0.8 or higher)])
fi
if test $ac_cv_sizeof_int -lt 4;
then
	AC_MSG_NOTICE([**ERROR** - Size of int is $ac_cv_sizeof_int bytes. You can not install the RADclock])
fi

if test $ac_cv_sizeof_long_long_int -lt 8;
then
	AC_MSG_NOTICE([**ERROR** - Size of long long int is $ac_cv_sizeof_long_long_int bytes. You can not install the RADclock)])
fi
AC_MSG_NOTICE([----------------------------------------])

